############################################
#      Data restore Utility Functions      #
############################################

is_mounted() {
  grep -q " `readlink -f $1` " /proc/mounts 2>/dev/null
  return $?
}

AskBut() {
 print "$1"; $KEYCHECK; $KEYCHECK; But_res=$?; [ "$But_res" = "42" ] && vb_ok=0 || vb_ok=1
 return $vb_ok
}

OTG_extSD() {
 if [ -d "/storage/${1}" ]
   then
     extSD=( "/storage/${1}" `awk '($1 ~ "^/dev/block/vold/public" && $2 == "/mnt/media_rw/'$1'") {print $3}' /proc/mounts` )
     [ "${extSD[1]}" = "vfat" ] && extSD[2]="FAT32" || extSD[2]="exFAT"
   else
     [ -d "/mnt/media_rw/${1}" ] && { USB_OTG=( "/mnt/media_rw/${1}" `awk '($1 ~ "^/dev/block/vold/public" && $2 == "/mnt/media_rw/'$1'") {print $3}' /proc/mounts` ); { [ "${USB_OTG[1]}" = "vfat" ] && USB_OTG[2]="FAT32" || USB_OTG[2]="exFAT"; } }
 fi
}

SetConfig() {
 print "Configure your restoring"; print "(use buttons: Volume Down - No, Volume Up - Yes):"; print;
 AskBut "- (-m) without media, intSD content (Yes/No) ?" && { print "  Yes"; key_m=true; } || { print "  No"; key_m=false; }
 AskBut "- (-r) without root, magisk content (Yes/No) ?" && { print "  Yes"; key_r=true; } || { print "  No"; key_r=false; }
}

GetConfig() {
 if $BOOTMODE; then
  for s in 2 3 4 5 6 7 8 9 10; do
   start_date=$(date -d @`expr "$start_sec" - "$s"` +"%m-%d %H:%M:%S")
   `logcat -d | grep -e "$start_date" > /dev/nul` && { ZIPNAME=`logcat -d | sed -ne "/^$start_date.*$/,$ p" | awk '/^.+(zip|ZIP).*$/{print $0}' | grep -io '\/.*\.zip'`; ZIPNAME=`echo ${ZIPNAME##*/*/}`; break; }
  done
   [[ "x$ZIPNAME" == x ]] && print "No possibility to read file name with keys."
  else
   ZIPNAME=`echo ${scr_n##/*/}`
 fi
 if [[ "$ZIPNAME" == *-a* || "x$ZIPNAME" == x ]]; then
   SetConfig
  else
   [[ "$ZIPNAME" == *-m* ]] && key_m=true || key_m=false
   [[ "$ZIPNAME" == *-r* ]] && key_r=true || key_r=false
   [[ "$ZIPNAME" == *-E* ]] && key_E=true || key_E=false #service key
 fi
}

runner() {
is_mounted /data || ex_it "Error. Data partition is not available. Exit"

if $BOOTMODE; then
 vol_1=$(sm list-volumes | grep -e "public.* mounted" | head -n1 | awk '{print $3}')
 if [ "x${vol_1}" != x ]; then
   OTG_extSD "$vol_1"
   vol_2=$(sm list-volumes | grep -v "${vol_1}" | grep -e "public.* mounted" | head -n1 | awk '{print $3}')
   [ "x${vol_2}" != x ] && OTG_extSD "$vol_2"
   if [ "x${USB_OTG}" != x ]; then
     print "USB_OTG is mounted ${USB_OTG[1]}, ${USB_OTG[2]}"; 
     ls "${USB_OTG[0]}"/databackup/data*.tar &>/dev/null && Ext_DBdir="${USB_OTG[0]}" || print "USB_OTG doesn't have any databackup"
    else
     print "USB-OTG is not mounted"; print "extSD is mounted, ${extSD[1]}, ${extSD[2]}"
     ls "${extSD[0]}"/databackup/data*.tar &>/dev/null && Ext_DBdir="${extSD[0]}" || print "extSD doesn't have any databackup"
   fi
  else
   print "USB-OTG, extSD are not mounted"; Ext_DBdir="/data/media/0"
 fi
 ls "$Ext_DBdir"/databackup/data*.tar &>/dev/null && DB_P="${Ext_DBdir}/databackup" || { print "Any data backup not found on USB-OTG, extSD, intSD"; ex_it "Script is finished. Exit"; }
else
  USB_OTG=($(grep -e "^/dev/block/[/]\{0,1\}sd[a-z0-9]\{2\} /[-_a-z0-9]\{2,15\} [usblktexvfat]\{4,7\}" /proc/mounts | cut -f2,3 -d ' '))
  [ "${USB_OTG[1]}" = "texfat" -o "${USB_OTG[1]}" = "exfat" -o "${USB_OTG[1]}" = "vfat" -o "${USB_OTG[1]}" = "fuseblk" ] && print "USB_OTG is mounted, ${USB_OTG[1]}" || print "USB-OTG is not mounted"
  if [ "x${USB_OTG}" != x -a "${USB_OTG[1]}" = "texfat" -o "${USB_OTG[1]}" = "exfat" -o "${USB_OTG[1]}" = "vfat" -o "${USB_OTG[1]}" = "fuseblk" ]; then
    ls "${USB_OTG[0]}"/databackup/data*.tar &>/dev/null && DB_P="${USB_OTG[0]}/databackup" || print "USB_OTG doesn't have any databackup"
  fi
  if [ -z "${DB_P}" ]; then
    extSD=($(grep -e "^/dev/block/m[a-z0-9]\{4,8\} /[-_a-z0-9]\{2,15\} [usblktexvfat]\{4,7\}" /proc/mounts | cut -f2,3 -d ' '))
    [ "${extSD[1]}" = "texfat" -o "${extSD[1]}" = "exfat" -o "${extSD[1]}" = "vfat" -o "${extSD[1]}" = "fuseblk" ] && print "extSD is mounted, ${extSD[1]}" || print "extSD is not mounted"
    if [ "x${extSD}" != x -a "${extSD[1]}" = "texfat" -o "${extSD[1]}" = "exfat" -o "${extSD[1]}" = "vfat" -o "${extSD[1]}" = "fuseblk" ]; then
      ls "${extSD[0]}"/databackup/data*.tar &>/dev/null && DB_P="${extSD[0]}/databackup" || print "extSD doesn't have any databackup"
    fi
  fi
  if [ -z "${DB_P}" ]; then
    ls /data/media/0/databackup/data*.tar &>/dev/null && DB_P="/data/media/0/databackup" || { print "Any data backup not found on USB-OTG, extSD, intSD"; ex_it "Script is finished. Exit"; }
  fi
fi

[ -r "${DB_P}/data~1.tar" ] && { DB_FN="${DB_P}/data~1.tar"; MVol="-M"; MVol_DB="-F ${D_bin}/new_vlm"; MV_prn=" multi-volume"; } || { 
[ -r "${DB_P}/data.tar" ] && DB_FN="${DB_P}/data.tar" || { print "Error"; print "Incorrect backup name in ${DB_P}"; ex_it "Exit"; } }
[ -e "${DB_P}/datarestore.log" ] && rm -f "${DB_P}/datarestore.log"; [ -e "${DB_P}/err_file.log" ] && rm -f "${DB_P}/err_file.log"; print "Found${MV_prn} data backup:"; print "${DB_FN}"; $BOOTMODE && print "Preparing..."

if [ ! -e "/bin/sh" ]; then
 mount -o rw,remount /
 if `touch /file.test 2>/dev/null`; then
   rm -f /file.test 2>/dev/null; binD=`which sh`; binD=`echo "${binD%%\/sh}"`; ln -s "$binD" /bin
  else
   [ "x${MVol}" != "x" ] && { print "Failure. Multy-volume backup cannot be restored"; print "Not available /bin simlink"; ex_it "Error 4. Exit" 2>/dev/null; } || print "Note. Not available /bin simlink"
 fi
fi

[ -d "/data/fonts" ] && a_now="A12" || a_now="A11"; [ -d "/data/bootanim" ] && a_now="A13"
}